#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTEX 30

typedef struct graphType{
	int n;
	int adjMatrix[MAX_VERTEX][MAX_VERTEX];	
} graphType;

void createGraph(graphType* g)
{
	int i, j;
	g->n = 0;
	for(i = 0; i < 8; i++) {
		for(j = 0; j < 8; j++) {
			g->adjMatrix[i][j] = 0;
		}
	}
}

void insertVertex(graphType* g, int v)
{
	if(g->n < 30) {
		g->n++;
	}
	else{
		printf("더 이상 추가할 점이 없습니다.");
	}
	
}

void insertEdge(graphType* g, int u, int v)
{
	
	g->adjMatrix[u][v] = 1;
	g->adjMatrix[v][u] = 1;
	// 책하고 다른 부분 신경 쓸 것
	// 무방향 그래프라면 : [u][v], [v][u] 모두 1이 들어가면 됨
	// 방향 그래프라면 : 메인에서 edge insert 시켜 줘야 함
	
}

void print_adjMatrix(graphType* g)
{
	int i;
	int j;
	for(i = 0; i < 8; i++) {
		for(j = 0; j < 8; j++) {
			printf("%d ", g->adjMatrix[i][j]);
		}
		printf("\n");
	}
}  

int main()
{
	int i;
	graphType *G; 
	G = (graphType *)malloc(sizeof(graphType));

	createGraph(G); 
	
	for(i=0; i<8; i++)
		insertVertex(G, i);
	
	insertEdge(G, 0, 1);
	insertEdge(G, 0, 2);
	insertEdge(G, 1, 3);
	insertEdge(G, 1, 4);
	insertEdge(G, 2, 5);
	insertEdge(G, 2, 6);
	insertEdge(G, 3, 7);
	insertEdge(G, 4, 7);
	insertEdge(G, 5, 7);
	insertEdge(G, 6, 7);
	
		
	printf("\n G의 인접 행렬");
	print_adjMatrix(G);
	
	return 0;
}